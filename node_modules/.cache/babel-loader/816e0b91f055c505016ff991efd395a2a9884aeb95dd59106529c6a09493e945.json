{"ast":null,"code":"var _jsxFileName = \"/Users/SYPHER/sypherGithub/Full-Stack-Dev-JS/JS/React/appointment-planner-project-codecademy/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isDuplicate = (newContact, existingContacts) => {\n  props.e;\n};\nexport const ContactsPage = props => {\n  _s();\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n  const [contacts, setContacts] = useState([]);\n  useEffect(() => {\n    const isDuplicate = contacts.some(contact => props.contacts.some(propContact => propContact.name === contact.name));\n    if (isDuplicate) {\n      console.log(\"Contact already exists: \" + contacts.name);\n    }\n  }, [props.contacts]);\n\n  /*\r\n  Add contact info and clear data\r\n  if the contact name is not a duplicate\r\n  */\n  const handleSubmit = e => {\n    e.preventDefault();\n    try {\n      const newContactData = {\n        name: e.target.elements.name.value,\n        phone: e.target.elements.phone.value,\n        email: e.target.elements.email.value\n      };\n      setContacts([...contacts, newContactData]);\n      // reset the form fields;\n      e.target.reset();\n    } catch (e) {\n      console.error(\"Error creating contact: \" + e);\n    }\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"0QkyoJrXgoisWwht0c6QpeUnBJE=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","isDuplicate","newContact","existingContacts","props","e","ContactsPage","_s","contacts","setContacts","some","contact","propContact","name","console","log","handleSubmit","preventDefault","newContactData","target","elements","value","phone","email","reset","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/SYPHER/sypherGithub/Full-Stack-Dev-JS/JS/React/appointment-planner-project-codecademy/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nconst isDuplicate = (newContact, existingContacts) => {\r\n  props.e\r\n}\r\n\r\nexport const ContactsPage = (props) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n  const [contacts, setContacts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const isDuplicate = contacts.some((contact) =>\r\n      props.contacts.some((propContact) => propContact.name === contact.name)\r\n    );\r\n    if (isDuplicate) {\r\n      console.log(\"Contact already exists: \" + contacts.name);\r\n    }\r\n  }, [props.contacts]);\r\n\r\n  /*\r\n  Add contact info and clear data\r\n  if the contact name is not a duplicate\r\n  */\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const newContactData = {\r\n        name: e.target.elements.name.value,\r\n        phone: e.target.elements.phone.value,\r\n        email: e.target.elements.email.value,\r\n      };\r\n\r\n      setContacts([...contacts, newContactData]);\r\n      // reset the form fields;\r\n      e.target.reset();\r\n    } catch (e) {\r\n      console.error(\"Error creating contact: \" + e);\r\n    }\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2>\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,WAAW,QAAQ,0CAA0C;AACtE,SAASC,QAAQ,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,MAAMC,WAAW,GAAGA,CAACC,UAAU,EAAEC,gBAAgB,KAAK;EACpDC,KAAK,CAACC,CAAC;AACT,CAAC;AAED,OAAO,MAAMC,YAAY,GAAIF,KAAK,IAAK;EAAAG,EAAA;EACrC;AACF;AACA;AACA;EACE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMK,WAAW,GAAGO,QAAQ,CAACE,IAAI,CAAEC,OAAO,IACxCP,KAAK,CAACI,QAAQ,CAACE,IAAI,CAAEE,WAAW,IAAKA,WAAW,CAACC,IAAI,KAAKF,OAAO,CAACE,IAAI,CAAC,CACxE;IACD,IAAIZ,WAAW,EAAE;MACfa,OAAO,CAACC,GAAG,CAAC,0BAA0B,GAAGP,QAAQ,CAACK,IAAI,CAAC;IACzD;EACF,CAAC,EAAE,CAACT,KAAK,CAACI,QAAQ,CAAC,CAAC;;EAEpB;AACF;AACA;AACA;EACE,MAAMQ,YAAY,GAAIX,CAAC,IAAK;IAC1BA,CAAC,CAACY,cAAc,EAAE;IAElB,IAAI;MACF,MAAMC,cAAc,GAAG;QACrBL,IAAI,EAAER,CAAC,CAACc,MAAM,CAACC,QAAQ,CAACP,IAAI,CAACQ,KAAK;QAClCC,KAAK,EAAEjB,CAAC,CAACc,MAAM,CAACC,QAAQ,CAACE,KAAK,CAACD,KAAK;QACpCE,KAAK,EAAElB,CAAC,CAACc,MAAM,CAACC,QAAQ,CAACG,KAAK,CAACF;MACjC,CAAC;MAEDZ,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEU,cAAc,CAAC,CAAC;MAC1C;MACAb,CAAC,CAACc,MAAM,CAACK,KAAK,EAAE;IAClB,CAAC,CAAC,OAAOnB,CAAC,EAAE;MACVS,OAAO,CAACW,KAAK,CAAC,0BAA0B,GAAGpB,CAAC,CAAC;IAC/C;EACF,CAAC;;EAED;AACF;AACA;AACA;;EAEE,oBACEL,OAAA;IAAA0B,QAAA,gBACE1B,OAAA;MAAA0B,QAAA,eACE1B,OAAA;QAAA0B,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACZ,eACV9B,OAAA;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACN9B,OAAA;MAAA0B,QAAA,eACE1B,OAAA;QAAA0B,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACT;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACN;AAEV,CAAC;AAACvB,EAAA,CAtDWD,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}