{"ast":null,"code":"var _jsxFileName = \"/Users/SYPHER/sypherGithub/Full-Stack-Dev-JS/JS/React/appointment-planner-project-codecademy/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isDuplicate = (name, existingContacts) => existingContacts.some(contact => contact.name === name);\nexport const ContactsPage = props => {\n  _s();\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n  const [name, setName] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [duplicate, setDuplicate] = useState(false);\n  useEffect(() => {\n    const duplicateCheck = isDuplicate(name, props.contacts);\n    setDuplicate(props.contacts.some(contact => contact.name === name)) ? true : false;\n    if (duplicateCheck) {\n      console.log(\"Contact already exists: \" + name);\n      setDuplicate(true);\n    }\n  }, [name]);\n\n  /*\r\n  Add contact info and clear data\r\n  if the contact name is not a duplicate\r\n  */\n  const handleSubmit = e => {\n    e.preventDefault();\n    try {\n      setName(e.target.elements.name.value);\n      setPhone(e.target.elements.phone.value);\n      setEmail(e.target.elements.email.value);\n      const duplicateCheck = isDuplicate(name, props.contacts);\n      if (duplicateCheck) {\n        console.log(\"Contact already exists: \" + name);\n        setDuplicate(true);\n      } else {\n        props.handleContacts(name, phone, email);\n\n        // reset the form fields;\n        e.target.reset();\n      }\n    } catch (e) {\n      console.error(\"Error creating contact: \" + e.message);\n    }\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: name,\n        setName: setName,\n        phone: phone,\n        setPhone: setPhone,\n        email: email,\n        setEmail: setEmail,\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        contactsFromApp: props.contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"vNkYol+xC/T7uxd5kzXSdoj6AbM=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","isDuplicate","name","existingContacts","some","contact","ContactsPage","props","_s","setName","phone","setPhone","email","setEmail","duplicate","setDuplicate","duplicateCheck","contacts","console","log","handleSubmit","e","preventDefault","target","elements","value","handleContacts","reset","error","message","children","fileName","_jsxFileName","lineNumber","columnNumber","contactsFromApp","_c","$RefreshReg$"],"sources":["/Users/SYPHER/sypherGithub/Full-Stack-Dev-JS/JS/React/appointment-planner-project-codecademy/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nconst isDuplicate = (name, existingContacts) =>\r\n  existingContacts.some((contact) => contact.name === name);\r\n\r\nexport const ContactsPage = (props) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n  const [name, setName] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [duplicate, setDuplicate] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const duplicateCheck = isDuplicate(name, props.contacts);\r\n    setDuplicate(props.contacts.some((contact) => contact.name === name)) ? true : false;\r\n    if (duplicateCheck) {\r\n      console.log(\"Contact already exists: \" + name);\r\n      setDuplicate(true);\r\n    }\r\n  }, [name]);\r\n\r\n  /*\r\n  Add contact info and clear data\r\n  if the contact name is not a duplicate\r\n  */\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      setName(e.target.elements.name.value);\r\n      setPhone(e.target.elements.phone.value);\r\n      setEmail(e.target.elements.email.value);\r\n\r\n      const duplicateCheck = isDuplicate(name, props.contacts);\r\n      if (duplicateCheck) {\r\n        console.log(\"Contact already exists: \" + name);\r\n        setDuplicate(true);\r\n      } else {\r\n        props.handleContacts(name, phone, email);\r\n\r\n        // reset the form fields;\r\n        e.target.reset();\r\n      }\r\n    } catch (e) {\r\n      console.error(\"Error creating contact: \" + e.message);\r\n    }\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2>\r\n        <ContactForm\r\n          name={name}\r\n          setName={setName}\r\n          phone={phone}\r\n          setPhone={setPhone}\r\n          email={email}\r\n          setEmail={setEmail}\r\n          handleSubmit={handleSubmit}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList contactsFromApp={props.contacts} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}