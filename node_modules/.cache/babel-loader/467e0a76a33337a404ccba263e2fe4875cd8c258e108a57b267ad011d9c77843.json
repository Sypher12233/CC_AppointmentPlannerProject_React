{"ast":null,"code":"var _jsxFileName = \"/Users/SYPHER/sypherGithub/Full-Stack-Dev-JS/JS/React/appointment-planner-project-codecademy/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = () => {\n  _s();\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n  const [contacts, setContacts] = useState([]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n    try {\n      const newContactData = {\n        name: e.target.element.name.value,\n        phone: e.target.element.phone.value,\n        email: e.target.element.email.value\n      };\n      const checkDup = contact.some(contact => contact.name === e.target.name);\n      if (checkDup) {\n        console.log(\"Contact already exists: \" + contact.name);\n      }\n    } catch (e) {\n      console.error(\"Error creating contact: \" + e);\n    }\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"Wk/5gz66h597tqB1iDdgoAzWnmc=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_s","contacts","setContacts","handleSubmit","e","preventDefault","newContactData","name","target","element","value","phone","email","checkDup","contact","some","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/SYPHER/sypherGithub/Full-Stack-Dev-JS/JS/React/appointment-planner-project-codecademy/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = () => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n  const [contacts, setContacts] = useState([]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n    try {\r\n      const newContactData = {\r\n        name: e.target.element.name.value,\r\n        phone: e.target.element.phone.value,\r\n        email: e.target.element.email.value,\r\n      };\r\n      \r\n      const checkDup = contact.some(\r\n        (contact) => contact.name === e.target.name\r\n      );\r\n      if (checkDup) {\r\n        console.log(\"Contact already exists: \" + contact.name);\r\n      }\r\n    } catch (e) {\r\n      console.error(\"Error creating contact: \" + e);\r\n    }\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2>\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,WAAW,QAAQ,0CAA0C;AACtE,SAASC,QAAQ,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC;AACF;AACA;AACA;EACE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMU,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,EAAE;IAClB;AACJ;AACA;AACA;IACI,IAAI;MACF,MAAMC,cAAc,GAAG;QACrBC,IAAI,EAAEH,CAAC,CAACI,MAAM,CAACC,OAAO,CAACF,IAAI,CAACG,KAAK;QACjCC,KAAK,EAAEP,CAAC,CAACI,MAAM,CAACC,OAAO,CAACE,KAAK,CAACD,KAAK;QACnCE,KAAK,EAAER,CAAC,CAACI,MAAM,CAACC,OAAO,CAACG,KAAK,CAACF;MAChC,CAAC;MAED,MAAMG,QAAQ,GAAGC,OAAO,CAACC,IAAI,CAC1BD,OAAO,IAAKA,OAAO,CAACP,IAAI,KAAKH,CAAC,CAACI,MAAM,CAACD,IAAI,CAC5C;MACD,IAAIM,QAAQ,EAAE;QACZG,OAAO,CAACC,GAAG,CAAC,0BAA0B,GAAGH,OAAO,CAACP,IAAI,CAAC;MACxD;IACF,CAAC,CAAC,OAAOH,CAAC,EAAE;MACVY,OAAO,CAACE,KAAK,CAAC,0BAA0B,GAAGd,CAAC,CAAC;IAC/C;EACF,CAAC;;EAED;AACF;AACA;AACA;;EAEE,oBACEN,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,eACErB,OAAA;QAAAqB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACZ,eACVzB,OAAA;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACNzB,OAAA;MAAAqB,QAAA,eACErB,OAAA;QAAAqB,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACT;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACN;AAEV,CAAC;AAACvB,EAAA,CA/CWD,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}